                   Python Exceptions(errors)
Exceptions are errors that occurs during the execution of a program.
These exceptions can break your code and force your program to stop working.

>>> 7/0
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    7/0
ZeroDivisionError: division by zero
>>> Print("Hello")
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    Print("Hello")
NameError: name 'Print' is not defined
>>> print("Hello")
Hello
>>> print "hi
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("hi)?
>>> number = int(input("Enter a whole number: "))
Enter a whole number: abc
Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    number = int(input("Enter a whole number: "))
ValueError: invalid literal for int() with base 10: 'abc'
>>> 





                    Handling Exceptions
Errors can be handled or caught by embedding my  code in try and except ststement blocks.
The code inside the try block is what I want to test for errors.
The code inside the except block will contain the handler of how to handle that error.
There has to be at least one except clause with every try clause.
The handlers for the specific errors are placed inside the except block.
The default handler is called if no handler is specified.



					Keywords Used in Handling Exceptions
try block: Lets me test a block fo code for errors.
except block: Lets me specify how to handle the errors.
finally block: Lets me specify what code to execute regardless of of what happens in try and except block.
else block: Leys me specify what code to execute if no exception errors occurs. This is optionally used.



     
					Syntax for handling Exceptions
try:
    code to test for errors
    
except:
    code to exeute to handle errors
    
finally:
    code to execute regardless of errors

else:
    code to execute if no errors



     